package com.weekly.assignment02.GuitarApp;

import java.util.*;

public class GuitarMain {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        Inventory inventory = new Inventory();
        inventory.seedData();

        while (true) {
            System.out.println("\n==== Guitar Inventory App ====");
            System.out.println("1. Admin Panel");
            System.out.println("2. Customer Panel");
            System.out.println("3. Exit");
            System.out.print("Enter choice: ");

            String choice = sc.nextLine();

            switch (choice) {
                case "1":
                    handleAdmin(sc, inventory);
                    break;
                case "2":
                    handleCustomer(sc, inventory);
                    break;
                case "3":
                    System.out.println("Exiting App...");
                    return;
                default:
                    System.out.println("Invalid choice.");
            }
        }
    }

    static void handleAdmin(Scanner sc, GuitarInventory inventory) {
        try {
            System.out.print("Enter Builder (or press space to skip): ");
            Builder builder = getEnumInput(sc, Builder.class);

            System.out.print("Enter Model: ");
            String model = sc.nextLine();

            System.out.print("Enter Type (or press space to skip): ");
            Type type = getEnumInput(sc, Type.class);

            int numStrings = getIntInput(sc, "Enter number of strings: ");

            System.out.print("Enter Back Wood (or press space to skip): ");
            Wood backWood = getEnumInput(sc, Wood.class);

            System.out.print("Enter Top Wood (or press space to skip): ");
            Wood topWood = getEnumInput(sc, Wood.class);

            double price = getDoubleInput(sc, "Enter Price: ");

            GuitarSpec spec = new GuitarSpec(builder, model, type, numStrings, backWood, topWood);
            Guitar guitar = new Guitar(spec, price);
            inventory.addGuitar(guitar);
        } catch (Exception e) {
            System.out.println("Error adding guitar. Please try again.");
        }
    }

    static void handleCustomer(Scanner sc, GuitarInventory inventory) {
        inventory.displayGuitars();

        System.out.println("\n--- Search Guitar ---");
        Builder builder = getEnumInput(sc, Builder.class, true);
        System.out.print("Enter Model (or press space to skip): ");
        String model = sc.nextLine().trim();
        model = model.isEmpty() ? null : model;

        Type type = getEnumInput(sc, Type.class, true);
        Integer numStrings = getIntInputNullable(sc, "Enter number of strings (or press space to skip): ");
        Wood backWood = getEnumInput(sc, Wood.class, true);
        Wood topWood = getEnumInput(sc, Wood.class, true);

        GuitarSpec searchSpec = new GuitarSpec(builder, model, type, numStrings != null ? numStrings : 0, backWood, topWood);
        List<Guitar> results = inventory.search(searchSpec);

        if (results.isEmpty()) {
            System.out.println("No guitars matched your criteria.");
        } else {
            System.out.println("Matching Guitars:");
            inventory.displayGuitars();
        }

        System.out.print("Do you want to sort by price? (asc/desc/skip): ");
        String sort = sc.nextLine();
        if (sort.equalsIgnoreCase("asc") || sort.equalsIgnoreCase("desc")) {
            List<Guitar> sorted = inventory.sortByPrice(sort.equalsIgnoreCase("asc"));
            for (int i = 0; i < sorted.size(); i++) {
                sorted.get(i).display(i);
            }
        }
    }

    static <T extends Enum<T>> T getEnumInput(Scanner sc, Class<T> enumClass) {
        return getEnumInput(sc, enumClass, false);
    }

    static <T extends Enum<T>> T getEnumInput(Scanner sc, Class<T> enumClass, boolean optional) {
        T[] values = enumClass.getEnumConstants();
        while (true) {
            System.out.print(Arrays.toString(values) + "\nEnter: ");
            String input = sc.nextLine().trim();
            if (input.isEmpty() && optional) return null;

            for (T val : values) {
                if (val.name().equalsIgnoreCase(input)) return val;
            }
            System.out.println("Invalid input. Try again.");
        }
    }

    static int getIntInput(Scanner sc, String prompt) {
        while (true) {
            System.out.print(prompt);
            try {
                return sc.nextInt();
            } catch (Exception e) {
                sc.nextLine(); // consume invalid input
                System.out.println("Invalid number. Try again.");
            }
        }
    }

    static Integer getIntInputNullable(Scanner sc, String prompt) {
        while (true) {
            System.out.print(prompt);
            String input = sc.nextLine().trim();
            if (input.isEmpty()) return null;

            try {
                return Integer.parseInt(input);
            } catch (Exception e) {
                System.out.println("Invalid number. Try again.");
            }
        }
    }

    static double getDoubleInput(Scanner sc, String prompt) {
        while (true) {
            System.out.print(prompt);
            try {
                return sc.nextDouble();
            } catch (Exception e) {
                sc.nextLine(); // consume
                System.out.println("Invalid amount. Try again.");
            }
        }
    }
}
