package com.weekly.assignment02.GuitarApp;

import java.util.InputMismatchException;
import java.util.List;
import java.util.Scanner;

public class GuitarMain {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        Inventory inventory = new Inventory();

        // Add sample guitars manually
        inventory.addGuitar("1", 1500.0, Builder.FENDER, "Stratocaster", Type.ELECTRIC, 6, Wood.MAHOGANY, Wood.MAPLE);
        inventory.addGuitar("2", 1200.0, Builder.MARTIN, "D-28", Type.ACOUSTIC, 6, Wood.BRAZILIAN_ROSEWOOD, Wood.CEDAR);
        inventory.addGuitar("3", 1000.0, Builder.GIBSON, "SG", Type.ELECTRIC, 6, Wood.MAPLE, Wood.MAPLE);
        inventory.addGuitar("4", 2000.0, Builder.COLLINGS, "OM2H", Type.ACOUSTIC, 12, Wood.SITKA, Wood.ADIRONDACK);

        while (true) {
            System.out.println("\n====== RICK'S GUITAR INVENTORY SYSTEM ======");
            System.out.println("1. Admin Panel");
            System.out.println("2. Customer Panel");
            System.out.println("3. Exit");
            System.out.print("Choose: ");
            String choice = sc.nextLine().trim();

            if (choice.equals("1")) handleAdmin(sc, inventory);
            else if (choice.equals("2")) handleCustomer(sc, inventory);
            else if (choice.equals("3")) break;
            else System.out.println("‚ùå Invalid choice.");
        }

        System.out.println("üîö Thank you for using Rick's Inventory!");
    }

    private static void handleAdmin(Scanner sc, Inventory inventory) {
        System.out.println("\n--- üîê Admin Panel ---");

        System.out.print("Enter ID: ");
        String id = sc.nextLine();

        double price = 0.0;
        while (true) {
            System.out.print("Enter Price: ");
            String input = sc.nextLine();
            try {
                price = Double.valueOf(input); // safe boxed wrapper
                break;
            } catch (Exception e) {
                System.out.println("‚ùå Invalid price. Please enter a numeric value.");
            }
        }

        System.out.println("Choose Builder:");
        Builder.showOptions();
        Builder builder = null;
        while (true) {
            String builderStr = sc.nextLine().toUpperCase();
            try {
                builder = Builder.valueOf(builderStr);
                break;
            } catch (Exception e) {
                System.out.println("‚ùå Invalid builder. Try again:");
            }
        }

        System.out.print("Enter Model: ");
        String model = sc.nextLine();

        System.out.println("Choose Type:");
        Type.showOptions();
        Type type = null;
        while (true) {
            String typeStr = sc.nextLine().toUpperCase();
            try {
                type = Type.valueOf(typeStr);
                break;
            } catch (Exception e) {
                System.out.println("‚ùå Invalid type. Try again:");
            }
        }

        int numStrings = 0;
        while (true) {
            System.out.print("Enter number of strings: ");
            String input = sc.nextLine();
            try {
                numStrings = Integer.valueOf(input); // boxed, no parse
                break;
            } catch (Exception e) {
                System.out.println("‚ùå Invalid number. Enter digits only.");
            }
        }

        System.out.println("Choose Back Wood:");
        Wood.showOptions();
        Wood back = null;
        while (true) {
            String backStr = sc.nextLine().toUpperCase();
            try {
                back = Wood.valueOf(backStr);
                break;
            } catch (Exception e) {
                System.out.println("‚ùå Invalid wood. Try again:");
            }
        }

        System.out.println("Choose Top Wood:");
        Wood.showOptions();
        Wood top = null;
        while (true) {
            String topStr = sc.nextLine().toUpperCase();
            try {
                top = Wood.valueOf(topStr);
                break;
            } catch (Exception e) {
                System.out.println("‚ùå Invalid wood. Try again:");
            }
        }

        inventory.addGuitar(id, price, builder, model, type, numStrings, back, top);
        System.out.println("‚úÖ Guitar added successfully!");

        System.out.println("\nüì¶ Updated Inventory:");
        inventory.displayAll();
    }

    private static void handleCustomer(Scanner sc, Inventory inventory) {
        System.out.println("\n========== üé∏ Welcome Customer ==========\n");
        System.out.println("üì¶ Current Guitar Inventory:");
        inventory.displayAll();

        System.out.println("\nDo you want to sort by price?");
        System.out.println("1. Ascending");
        System.out.println("2. Descending");
        System.out.println("3. Skip");
        System.out.print("Enter choice: ");
        String sort = sc.nextLine();

        if (sort.equals("1")) inventory.displaySorted(1);
        else if (sort.equals("2")) inventory.displaySorted(2);

        System.out.println("\nüéØ Let's search your ideal guitar.");
        System.out.println("üëâ Press space/Enter to skip any option.");

        System.out.println("Available Builders:");
        Builder.showOptions();
        String builderInput = sc.nextLine().trim().toUpperCase();
        Builder builder = builderInput.isEmpty() ? Builder.ANY : Builder.valueOf(builderInput);

        System.out.print("Enter Model: ");
        String model = sc.nextLine().trim();

        System.out.println("Available Types:");
        Type.showOptions();
        String typeInput = sc.nextLine().trim().toUpperCase();
        Type type = typeInput.isEmpty() ? Type.ANY : Type.valueOf(typeInput);

        System.out.print("Enter Number of Strings: ");
        String stringInput = sc.nextLine().trim();
        int numStrings = stringInput.isEmpty() ? 0 : Integer.valueOf(stringInput);

        System.out.println("Available Woods:");
        Wood.showOptions();

        System.out.print("Enter Back Wood: ");
        String backInput = sc.nextLine().trim().toUpperCase();
        Wood back = backInput.isEmpty() ? Wood.ANY : Wood.valueOf(backInput);

        System.out.print("Enter Top Wood: ");
        String topInput = sc.nextLine().trim().toUpperCase();
        Wood top = topInput.isEmpty() ? Wood.ANY : Wood.valueOf(topInput);

        GuitarSpec searchSpec = new GuitarSpec(builder, model, type, numStrings, back, top);
        List<Guitar> results = inventory.search(searchSpec);

        if (results.isEmpty()) {
            System.out.println("‚ùå No matching guitars found.");
        } else {
            System.out.println("\n‚úÖ Matching guitars:");
            inventory.printHeader();
            for (Guitar g : results) g.display();
            inventory.printFooter();
        }
    }
}